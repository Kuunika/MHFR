
pipeline {
    agent any
     triggers {
        githubPush()
      }
    stages {
        stage('Prep'){
            steps{
            script {
                checkout scm
                sh 'git rev-parse --short HEAD > .git/commit-id'
                containerTag =readFile('.git/commit-id').trim()
            }
            }
        }
        stage('testing'){
            parallel {
            stage('unit testing'){
                agent {  docker { image 'node:15.8.0-alpine3.10'}}
                steps {
                    sh  "echo 'install npm dev dependencies'"
                    sh  "echo 'run unit tests'"
                }
            }
            stage('e2e'){
                agent { docker { image 'node:15.8.0-alpine3.10'} }
                steps {
                     sh  "echo 'run end to end tests'"
                }
            }
            }

        }
    // stage('Testing'){
    //         parallel {
    //         stage('unit testing'){
    //             agent {  docker { image 'node:15.8.0-alpine3.10'}}
    //             steps {
    //                 sh  'npm i -D'
    //                 sh  'npm run test'
    //             }
    //         }
    //         stage('e2e'){
    //             agent { docker { image 'node:15.8.0-alpine3.10'} }
    //             steps {
    //                 sh 'npm run e2e'
    //             }
    //         }
    //         }
    // }
        // stage('Deploy to docker'){
        //     steps {
        //         script {

        //             if (env.BRANCH_NAME=='staging'){
        //                 containerTag = "staging-${containerTag}"
        //             }
        //             docker.withRegistry('https://index.docker.io/v1/', 'Docker-2'){
        //                 def image = docker.build("loui4/test-docker:${containerTag}")
        //                 image.push()
        //             }
        //         }
        //     }
        // }

        // stage('Deploy to production'){
        //     when {
        //         branch 'master'
        //     }
        //     steps {
        //         sh "echo 'deploying to production'"
        //     }
        // }

        // stage('Deploy to Staging Server'){
        //     when {
        //         branch 'staging'
        //     }
        //     steps {
        //         sh "echo 'deploying to staging server'"
        //     }
        // }

        // stage('Deploy to server'){
        //    steps {
        //         script{
        //             containerName="node-docker-testing"
        //             sshagent(credentials: ['mac-ssh']){
        //                 sh 'ssh -vvv -o StrictHostKeyChecking=no jenkinsr@hostname.com'
        //                 sh 'docker stop ${containerName}'
        //                 sh 'docker rm ${containerName}'
        //                 sh 'docker run -d -p 3000:3000 --name ${containerName} loui4/test-docker:${commit_id}'
        //         }
        //         }
        //     }
        // }
    }
}

